.bg-gradient {
  @extend .bg-gradient;
}

.bg-gray {
  background-color: var(--bs-gray);
}

.pos-centered {
  transform: translate(-50%, -50%);
  left: 50%;
  top: 50%;

  .column--kachel {
    position: relative;
    margin: auto;
  }
}

.pos-centered-right {
  transform: translate(0%, -50%);
  right: 0;
  top: 50%;

  .column--kachel {
    right: 0;
  }
}

.pos-centered-left {
  transform: translate(0%, -50%);
  left: 0;
  top: 50%;

  .column--kachel {
    left: 0;
  }
}

.pos-top-right {
  top: 0;
  right: 0;

  .column--kachel {
    top: 0;
    right: 0;
  }
}

.pos-top-left {
  top: 0;
  left: 0;

  .column--kachel {
    top: 0;
    left: 0;
  }
}

.pos-top-center {
  transform: translate(-50%, 50px);
  left: 50%;
  top: 0;

  .column--kachel {
    position: relative;
    margin: 0 auto;
  }
}

.pos-bottom-right {
  bottom: 0;
  right: 0;

  .column--kachel {
    bottom: 0;
    right: 0;
  }
}

.pos-bottom-left {
  bottom: 0;
  left: 0;

  .column--kachel {
    bottom: 0;
    left: 0;
  }
}

.pos-bottom-center {
  transform: translate(-50%, 0px);
  left: 50%;
  bottom: 0;

  .column--kachel {
    position: relative;
    margin: 0 auto;
  }
}

.two-column-text {
  @include media-breakpoint-up(lg) {
    column-count: 2;
    column-gap: var(--bs-gutter-x);
  }
}

.half-container {
  @extend %half-container;
}

.make-fullwidth {
  @extend %make-fullwidth;
}

.w-auto {
  max-width: none !important;
  min-width: 0 !important;
}

a.disabled-link {
  cursor: auto;
  text-decoration: none;
  pointer-events: none;
}

[class*="pull-"] {
  position: relative;
  z-index: 3;
}

.move-content + * {
  display: none;
}



.remove-bottom-gutter {
  margin-bottom: calc(-1 * var(--main-gap)) !important;
}

.remove-top-gutter {
  margin-top: calc(-1 * var(--main-gap)) !important;
}


.font-primary {
  font-family: $font-family-base;
}

.font-secondary {
  font-family: $headings-font-family;
}



.invisible {
  display: none !important;
}


@include media-breakpoint-up(lg) {
  [class*="offset-margin"],
  [class*="offset-padding"] {
    transition: all .5s ease-in-out;
  }

  .offset-margin-sm {
    @include offset-styles('sm', $offset-sm);
  }
  .offset-margin-lg {
    @include offset-styles('lg', $offset-lg);
  }

  .offset-padding-sm {
    @include padding-styles('sm', $offset-sm);
  }
  .offset-padding-lg {
    @include padding-styles('lg', $offset-lg);
  }
}


[class*="offset-all-margin"],
[class*="offset-all-padding"] {
  transition: all .5s ease-in-out;
}

.offset-all-margin-sm {
  @include offset-styles('sm', $offset-sm);
}

.offset-all-margin-lg {
  @include offset-styles('lg', $offset-lg);
}

.offset-all-padding-sm {
  @include padding-styles('sm', $offset-sm);
}

.offset-all-padding-lg {
  @include padding-styles('lg', $offset-lg);
}



$gap-properties: (
  "p": "padding",
  "m": "margin"
);

$gap-sides: (
  "t": "top",
  "b": "bottom",
  "s": "left",  // Maps to start in LTR
  "e": "right" // Maps to end in LTR
);

$gap-value: var(--main-gap);

@each $breakpoint, $size in $grid-breakpoints {
  $infix: if($breakpoint == xs, "", "-#{$breakpoint}");

  @include media-breakpoint-up($breakpoint) {
    @each $propAbbr, $propName in $gap-properties {
      // All sides: .m-gap, .p-lg-gap
      .#{$propAbbr}#{$infix}-gap {
        #{$propName}: $gap-value !important;
      }

      // X-axis: .mx-gap, .px-md-gap
      .#{$propAbbr}x#{$infix}-gap {
        #{$propName}-left: $gap-value !important;
        #{$propName}-right: $gap-value !important;
      }

      // Y-axis: .my-gap, .py-sm-gap
      .#{$propAbbr}y#{$infix}-gap {
        #{$propName}-top: $gap-value !important;
        #{$propName}-bottom: $gap-value !important;
      }

      // Individual sides: .mt-gap, .mb-xl-gap
      @each $sideAbbr, $sideName in $gap-sides {
        .#{$propAbbr}#{$sideAbbr}#{$infix}-gap {
          #{$propName}-#{$sideName}: $gap-value !important;
        }
      }
    }
  }
}



$gap-properties: (
  "p": "padding",
  "m": "margin"
);

$gap-sides: (
  "t": "top",
  "b": "bottom",
  "s": "left",  // Maps to start in LTR
  "e": "right" // Maps to end in LTR
);

$gap-value: var(--main-gap);

@each $breakpoint, $size in $grid-breakpoints {
  $infix: if($breakpoint == xs, "", "-#{$breakpoint}");

  @include media-breakpoint-up($breakpoint) {
    @each $propAbbr, $propName in $gap-properties {
      // All sides: .m-gap, .p-lg-gap
      .#{$propAbbr}#{$infix}-gap {
        #{$propName}: $gap-value !important;
      }

      // X-axis: .mx-gap, .px-md-gap
      .#{$propAbbr}x#{$infix}-gap {
        #{$propName}-left: $gap-value !important;
        #{$propName}-right: $gap-value !important;
      }

      // Y-axis: .my-gap, .py-sm-gap
      .#{$propAbbr}y#{$infix}-gap {
        #{$propName}-top: $gap-value !important;
        #{$propName}-bottom: $gap-value !important;
      }

      // Individual sides: .mt-gap, .mb-xl-gap
      @each $sideAbbr, $sideName in $gap-sides {
        .#{$propAbbr}#{$sideAbbr}#{$infix}-gap {
          #{$propName}-#{$sideName}: $gap-value !important;
        }
      }
    }
  }
}