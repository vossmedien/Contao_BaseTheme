@mixin responsive-font-size-breakpoint($font-map, $key) {
  @if map-has-key($font-map, $key) {
    $sizes: map-get($font-map, $key);
    @if map-has-key($sizes, 'mobile') and map-has-key($sizes, 'tablet') and map-has-key($sizes, 'desktop') {
      $mobile-size: map-get($sizes, 'mobile');
      $tablet-size: map-get($sizes, 'tablet');
      $desktop-size: map-get($sizes, 'desktop');

      font-size: $mobile-size;

      @include media-breakpoint-up(md) {
        font-size: $tablet-size;
      }

      @include media-breakpoint-up(lg) {
        font-size: $desktop-size;
      }
    } @else {
      @warn "Map fÃ¼r Key '#{$key}' muss 'mobile', 'tablet' und 'desktop' enthalten. Font-size nicht gesetzt.";
    }
  } @else {
    @warn "Key '#{$key}' nicht in der Font-Map gefunden. Font-size nicht gesetzt.";
  }
}


@each $heading, $sizes in $headings-font-sizes {
  #{$heading}, .#{$heading} {
    &:not(:has([class*="h"])) {
      @include responsive-font-size-breakpoint($headings-font-sizes, $heading);
      line-height: $headings-line-height;
      font-weight: var(--bs-#{$heading}-font-weight, $headings-font-weight);

      &:not(.ce--headline *) {
        margin-bottom: map-get($headline-margins, $heading);

        @include media-breakpoint-down(md) {
          margin-bottom: map-get($mobile-headline-margins, $heading);
        }

        display: block;
      }
    }
  }
}

.ce--headline {
  display: flex;
  flex-flow: column nowrap;

  * {
    margin: 0;
    max-width: 100%;
  }

  @each $heading in map-keys($headings-font-sizes) {
    &.hl-#{$heading} {
      margin-bottom: map-get($headline-margins, $heading);

      @include media-breakpoint-down(md) {
        margin-bottom: map-get($mobile-headline-margins, $heading);
      }

      .ce--topline {
        @include responsive-font-size-breakpoint($topline-sizes-by-headline, $heading);
        color: var(--bs-topline-color);
        font-weight: var(--bs-topline-font-weight);
        margin: map-get($topline-margins, $heading);
      }

      .ce--subline {
        @include responsive-font-size-breakpoint($subline-sizes-by-headline, $heading);
        color: var(--bs-subline-color);
        font-weight: var(--bs-subline-font-weight);
        margin: map-get($subline-margins, $heading);
      }
    }
  }
}

.container .ce--headline > .container {
  margin: 0;
}

[class*="text-white"] .ce--headline {
  --#{$prefix}headline-color: var(--#{$prefix}white);
}

@mixin headline-weights {
  @for $i from 1 through 6 {
    h#{$i}, .h#{$i} {
        font-weight: var(--bs-h#{$i}-font-weight, $headings-font-weight);
    }
  }
}

@include headline-weights;

.ce--subline {
  color: var(--bs-subline-color);
  font-weight: var(--bs-subline-font-weight);
}

.ce--topline {
  color: var(--bs-topline-color);
  font-weight: var(--bs-topline-font-weight);
}