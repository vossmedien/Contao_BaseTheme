<?php $this->block('head'); ?><?php

require_once __DIR__ . '/../theme_asset_loader.php';

// Ermittle den aktuellen Theme-Namen aus dem Verzeichnis dieses Templates (Groß/Kleinschreibung bleibt hier erhalten)
$currentThemeName = get_theme_name_from_dir(__DIR__);
// Übergebe den Originalnamen und das Verzeichnis. Die Funktion kümmert sich ums Lowercasing für den Pfad.
$themeAssets = load_theme_assets_from_manifest($currentThemeName, __DIR__);


$this->rootAttributes = $this
    ->attr()
    ->set('lang', $this->language)
    ->set('dir', 'rtl', $this->isRTL)
    ->mergeWith($this->rootAttributes);

$this->bodyAttributes = $this
    ->attr()
    ->set('id', 'top')
    ->addClass($this->class)
    ->setIfExists('onload', $this->onload)
    ->mergeWith($this->bodyAttributes);

?>
<!DOCTYPE html>
<html<?= $this->rootAttributes ?>>
<head>

    <?php $this->block('head'); ?>
    <meta charset="<?= $this->charset ?>">
    <title><?= $this->title ?></title>
    <base href="<?= $this->base ?>">

    <?php $this->block('meta'); ?>

       <?php
    // Get the current hostname
    $hostname = $_SERVER['HTTP_HOST'];

    // Check if the hostname starts with "www."
    if (strpos($hostname, 'www.') === 0) {
        // If it starts with "www.", use the original robots tag
        echo '<meta name="robots" content="' . $this->robots . '">';
    } else {
        // If it doesn't start with "www.", use the fallback
        echo '<meta name="robots" content="noindex,nofollow"/>';
    }
    ?>


    <meta name="robots" content="<?= $this->robots ?>">
    <meta name="description" content="<?= Contao\StringUtil::substr($this->description, 320) ?>">
    <meta name="generator" content="Contao Open Source CMS">
    <?php $this->endblock(); ?>

    <?php if ($this->canonical): ?>
        <link rel="canonical" href="<?= $this->canonical ?>">
    <?php endif; ?>

    <?= $this->viewport ?>
    <?= $this->framework ?>

    <?php
    // --- NEU: CSS optimiert einbinden ---

    // Gewünschte Ladereihenfolge und spezifische Attribute
    $cssLoadConfig = [
        '_fonts.bundle.min.css' => ['preload' => true, 'media' => 'all', 'type' => 'fonts'],
        '_vendors.bundle.min.css' => ['preload' => false, 'media' => 'all', 'type' => 'vendors'],
        '_base.bundle.min.css' => ['preload' => false, 'media' => 'all', 'type' => 'base'],
        '_theme.bundle.min.css' => ['preload' => false, 'media' => 'all', 'type' => 'theme'],
        '_root-variables.bundle.min.css' => ['preload' => false, 'media' => 'all', 'type' => 'root-variables'],
    ];

    $outputtedCss = [];

    // Hilfsfunktion, um den Pfad einer CSS-Datei anhand des Suffixes zu finden
    $findAssetPathBySuffix = function ($suffix, $assets) {
        foreach ($assets as $assetPath) {
            if (str_ends_with($assetPath, $suffix)) {
                return $assetPath;
            }
        }
        return null;
    };

    // 1. Preload für _fonts.bundle.min.css (wenn vorhanden)
    $fontsCssPath = $findAssetPathBySuffix('_fonts.bundle.min.css', $themeAssets['css'] ?? []);
    if ($fontsCssPath) {
        echo '<link rel="preload" href="' . $this->base . $fontsCssPath . '" as="style">' . "\n    ";
    }

    // 2. Stylesheets in definierter Reihenfolge ausgeben
    $orderedCssPathsForOutput = [];
    // Zuerst die konfigurierten CSS-Dateien in der gewünschten Reihenfolge sammeln
    foreach (array_keys($cssLoadConfig) as $fileSuffix) {
        $path = $findAssetPathBySuffix($fileSuffix, $themeAssets['css'] ?? []);
        if ($path) {
            $orderedCssPathsForOutput[$fileSuffix] = $path;
        }
    }

    // Generiere die <link> Tags für die konfigurierten Dateien
    foreach ($cssLoadConfig as $fileSuffix => $config) {
        if (isset($orderedCssPathsForOutput[$fileSuffix])) {
            $path = $orderedCssPathsForOutput[$fileSuffix];
            $fullPath = $this->base . $path; // Annahme: $this->base ist korrekt und $path ist relativ dazu oder ein Webpfad

            echo '<link rel="stylesheet" href="' . $fullPath . '"';
            if (isset($config['media'])) {
                echo ' media="' . $config['media'] . '"';
            }
            if (isset($config['onload'])) {
                echo ' onload="' . $config['onload'] . '"';
            }
            echo '>' . "\n    ";

            // Noscript Fallback für asynchron geladene Stylesheets
            if (isset($config['onload'])) {
                echo '<noscript><link rel="stylesheet" href="' . $fullPath . '"></noscript>' . "\n    ";
            }
            $outputtedCss[] = $path; // Markiere als ausgegeben
        }
    }

    // Füge alle verbleibenden CSS-Dateien aus $themeAssets['css'] (die nicht in $cssLoadConfig waren)
    // normal zu $GLOBALS['TL_CSS'] hinzu, damit $this->stylesheets sie verarbeiten kann.
    // Dies stellt sicher, dass keine CSS-Datei verloren geht, falls neue Bundles hinzukommen,
    // die nicht explizit in $cssLoadConfig behandelt werden.
    if (!empty($themeAssets['css'])) {
        foreach ($themeAssets['css'] as $cssFile) {
            if (!in_array($cssFile, $outputtedCss)) {
                $GLOBALS['TL_CSS'][] = $cssFile . '|static';
            }
        }
    }
    ?>


    <?php // --- NEU: Font Preloads ---
    if (!empty($themeAssets['fonts_preload'])) {
        foreach ($themeAssets['fonts_preload'] as $font) {
            echo '<link rel="preload" href="' . $font['href'] . '" as="font" type="' . $font['type'] . '" crossorigin>' . "\n    ";
        }
    }
    ?>
    <?= $this->stylesheets ?>
    <?= $this->mooScripts ?>
    <?= $this->head ?>
    <?php $this->endblock(); ?>

</head>
<body<?= $this->bodyAttributes ?>>
<div class="BodyScrollToTop"><i class="fasl fa-arrow-up "></i></div>
<?php $this->block('body'); ?>
<?php $this->sections('top'); ?>

<div id="wrapper">

    <?php $this->block('header'); ?>
    <?php if ($this->header): ?>
        <!-- indexer::stop -->
        <header id="header">
            <div class="inside">
                <?= $this->header ?>
            </div>
        </header>
        <!-- indexer::continue -->
    <?php endif; ?>
    <?php $this->endblock(); ?>

    <?php $this->sections('before'); ?>

    <?php $this->block('container'); ?>
    <div id="container" class="<?php if ($this->left) : ?>with--left-col<?php endif; ?> <?php if ($this->right) : ?>with--right-col<?php endif; ?>">
        <div class="row">
            <?php $this->block('main'); ?>
            <main id="main" class="col col-md-12 order-md-2">
                <div class="main-content">
                    <?= $this->main ?>
                </div>
                <?php $this->sections('main'); ?>
            </main>
            <?php $this->endblock(); ?>

            <?php $this->block('left'); ?>
            <?php if ($this->left) : ?>
                <aside id="left" class="col-12 col-md-auto order-md-1">
                    <div class="left-content">
                        <?= $this->left ?>
                    </div>
                </aside>
            <?php endif; ?>
            <?php $this->endblock(); ?>

            <?php $this->block('right'); ?>
            <?php if ($this->right): ?>
                <aside id="right" class="col-12 col-md-auto order-md-2">
                    <div class="right-content">
                        <?= $this->right ?>
                    </div>
                </aside>
            <?php endif; ?>
            <?php $this->endblock(); ?>
        </div>
    </div>
    <?php $this->endblock(); ?>

    <?php $this->sections('after'); ?>

    <?php $this->block('footer'); ?>
    <?php if ($this->footer): ?>
        <!-- indexer::stop -->
        <footer id="footer" itemscope itemtype="http://schema.org/WPFooter">
            <?= $this->footer ?>
        </footer>
        <!-- indexer::continue -->
    <?php endif; ?>
    <?php $this->endblock(); ?>

</div>

<?php $this->sections('bottom'); ?>
<?php $this->endblock(); ?>





<?php // --- NEU: JS einbinden ---
// Vendor JS zuerst laden (jetzt individuell)
if (!empty($themeAssets['js_vendor_individual'])) {
    foreach ($themeAssets['js_vendor_individual'] as $js) {
        // $js ist nun ein Array mit den Schlüsseln 'src' und 'attributes'
        // z.B. $js = ['src' => 'files/base/.../script.js', 'attributes' => '|defer|static']
        $scriptTag =  $js['src'] . $js['attributes'];
        $GLOBALS['TL_JAVASCRIPT'][] = $scriptTag ;
    }
}

// Dann App JS (aus dem Manifest des App-Bundles)
if (!empty($themeAssets['js_app'])) {
    foreach ($themeAssets['js_app'] as $js) {
        // $js['src'] ist hier der von Webpack generierte Pfad zum App-Bundle
        $scriptTag =  $js['src'] . '|defer|static'; // Annahme: App-Bundle immer defer|static
        $GLOBALS['TL_JAVASCRIPT'][] = $scriptTag ;
    }
}
?>




<?= $this->mootools ?>
<?= $this->jsonLdScripts ?>


<noscript>
    <style>
        [data-animation] {
            opacity: 1 !important;
            visibility: visible !important;
        }
    </style>
</noscript>
</body>
</html>
