<?php
if (!isset($this->size)) {
    $this->{"size"} = "";
}
?>

    <div <?php echo $this->cssID; ?> class="content--element <?php echo $this->class; ?>">
        <div class="ce--inner  ">

            <?= VSM_HelperFunctions\HeadlineHelper::generateHeadlineHTML(
                $this->topline,
                $this->headline,
                $this->subline,
                $this->hl,
                $this->animation_type,
                null,
                false,
                null
            ); ?>

            <?php

            use Contao\StringUtil;

            if ($this->selecttype == "multiple") {
                $unserializedData = unserialize($this->multiSRC);
                if (is_array($unserializedData)) {
                    $dataSorted = array_map([StringUtil::class, 'binToUuid'], $unserializedData);
                } else {
                    $dataSorted = [];
                }
            } else {
                $dataSorted = [];
            }

            // Berechnen der sichtbaren Elemente für Masonry
            $totalItems = count($dataSorted);
            $desktopColumns = $this->masonry_spalten ?: 3;
            $mobileColumns = $this->masonry_spalten_mobile ?: 2;
            $visibleRows = $this->visible_rows ?: 2;

            $desktopVisibleItems = $desktopColumns * $visibleRows;
            $mobileVisibleItems = $mobileColumns * $visibleRows;

            $showMoreButtonDesktop = $this->limit_display && $totalItems > $desktopVisibleItems;
            $showMoreButtonMobile = $this->limit_display && $totalItems > $mobileVisibleItems;
            $showMoreButton = $showMoreButtonDesktop || $showMoreButtonMobile;
            ?>

            <div class="ce--content-slider <?php if ($this->show_pagination): ?>with-pagination<?php endif; ?> <?php if (count($this->galery) > $this->slides_per_view || count($dataSorted) > $this->slides_per_view) : ?>is-slider<?php endif; ?>">
                <?php $rand = rand(1, 100); ?>

                <?php if ($this->open_lightbox): ?>
                    <script type="text/javascript" defer>
                        document.addEventListener('DOMContentLoaded', function () {
                            new VenoBox({
                                selector: ".lightbox_<?= $rand;?>",
                                infinigall: true,
                                maxWidth: '95%',
                                numeration: true,
                                spinner: 'flow',
                                initialScale: 0.9,
                                transitionSpeed: 200,
                                fitView: true,
                            });
                        });
                    </script>
                <?php endif; ?>

                <?php if ($this->text_on_slider): ?>
                    <div class="slider-caption"
                         style="<?php if ($this->alternate_background_color): ?>background-color: <?= $this->alternate_background_color; ?>;<?php endif; ?> <?php if ($this->alternate_text_color): ?>color: <?= $this->alternate_text_color; ?>;<?php endif; ?>">
                        <?= $this->text_on_slider; ?>
                    </div>
                <?php endif; ?>

                <div class="swiper <?php if ($this->show_pagination): ?>with-pagination<?php endif; ?> content-slider_<?= $this->id; ?>">
                    <div class="swiper-wrapper align-items-center">
                        <?php $itemCount = 0; ?>
                        <?php if ($dataSorted) : ?>
                            <?php
                            $dataSorted = array_filter($dataSorted, function ($uuid) {
                                $file = \Contao\FilesModel::findByUuid($uuid);
                                return $file !== null && !$file->isDir;
                            });

                            foreach ($dataSorted as $uuid) : ?>
                                <?php $file = \Contao\FilesModel::findByUuid($uuid); ?>
                                <?php if ($file !== null && $file->type === 'file') : ?>
                                    <div class="swiper-slide text-center" data-animation="<?php if ($this->slide_animation_type) : ?><?php echo $this->slide_animation_type; ?><?php endif; ?>">
                                        <?= VSM_HelperFunctions\ImageHelper::generateImageHTML($uuid, null, $this->headline, $this->size, null, false, $this->open_lightbox ? $rand : ""); ?>
                                    </div>
                                    <?php $itemCount++; ?>
                                <?php endif; ?>
                            <?php endforeach ?>
                        <?php else : ?>
                            <?php foreach ($this->galery as $slide) : ?>
                                <div class="swiper-slide text-center" data-animation="<?php if ($this->slide_animation_type) : ?><?php echo $this->slide_animation_type; ?><?php endif; ?>">
                                    <?= VSM_HelperFunctions\ImageHelper::generateImageHTML($slide->slide, $this->headline, $slide->slide_text, $slide->size, null, false, $this->open_lightbox ? $rand : ""); ?>
                                </div>
                                <?php $itemCount++; ?>
                            <?php endforeach ?>
                        <?php endif; ?>
                    </div>
                </div>

                <?php if (count($this->galery) > 1 || count($dataSorted) > 1) : ?>
                    <?php if ($this->show_pagination): ?>
                        <div class="content-slider_<?= $this->id; ?> swiper-pagination"></div>
                    <?php endif; ?>
                    <?php if ($this->show_arrows): ?>
                        <div class="content-slider_<?= $this->id; ?> swiper-button-prev"></div>
                        <div class="content-slider_<?= $this->id; ?> swiper-button-next"></div>
                    <?php endif; ?>
                <?php endif; ?>
            </div>
            <?php if ($showMoreButton): ?>
                <div class="show-more-container text-center mt-3">
                    <?php if ($showMoreButtonDesktop): ?>
                        <button class="btn btn-primary show-more-button d-none d-md-inline-block show-more-desktop" data-show-more="true">
                            Mehr anzeigen
                        </button>
                    <?php endif; ?>
                    <?php if ($showMoreButtonMobile): ?>
                        <button class="btn btn-primary show-more-button d-md-none show-more-mobile" data-show-more="true">
                            Mehr anzeigen
                        </button>
                    <?php endif; ?>
                </div>
            <?php endif; ?>
        </div>
    </div>

<?php if (VSM_HelperFunctions\EnvHelper::isFrontend()): ?>
    <script type="text/javascript">
        window.addEventListener('DOMContentLoaded', function () {
            const containerId = '<?= $this->id; ?>';
            const swiperInstances = {};
            const macyInstances = {};
            let lastWidth = window.innerWidth;

            // Hilfsfunktion zum sicheren Aufrufen des LazyMediaLoaders
            function updateLazyLoading() {
                if (window.VSM && window.VSM.lazyMediaLoader) {
                    document.querySelectorAll('img[data-src], video[data-src], video.lazy').forEach(element => {
                        window.VSM.lazyMediaLoader.handleNewElement(element);
                    });
                }
            }

            function loadMacy(callback) {
                if (typeof Macy !== 'undefined') {
                    callback();
                } else {
                    setTimeout(function () {
                        loadMacy(callback);
                    }, 50);
                }
            }

            function initOrDestroySwiper(forceInit = false) {
                let currentWidth = window.innerWidth;
                let isMobile = currentWidth < 768;
                let shouldUseMacy = false;

                // Slider-Deaktivierungs-Logik basierend auf PHP-Variablen
                <?php if ($this->deactivate_slider === ''): ?>
                shouldUseMacy = false;
                <?php elseif ($this->deactivate_slider === 'desktop'): ?>
                shouldUseMacy = !isMobile;
                <?php elseif ($this->deactivate_slider === 'mobile'): ?>
                shouldUseMacy = isMobile;
                <?php elseif ($this->deactivate_slider === 'both'): ?>
                shouldUseMacy = true;
                <?php endif; ?>

                // Prüfe ob Neuinitialisierung notwendig ist
                if (!forceInit && Math.abs(currentWidth - lastWidth) < 50) {
                    return;
                }

                lastWidth = currentWidth;

                let container = document.querySelector('.content-slider_' + containerId);
                if (!container) return;

                let showMoreContainer = container.parentElement.querySelector('.show-more-container');

                // Cleanup bestehender Instanzen
                if (swiperInstances[containerId] && !swiperInstances[containerId].destroyed) {
                    swiperInstances[containerId].destroy(true, true);
                }
                if (macyInstances[containerId]) {
                    macyInstances[containerId].remove();
                    macyInstances[containerId] = null;
                }

                // Reset Container-Klassen
                container.classList.remove('swiper', 'macy-container');
                let items = container.querySelectorAll('.swiper-slide, .macy-item');
                items.forEach(item => {
                    item.classList.remove('swiper-slide', 'macy-item', 'hidden-desktop', 'hidden-mobile');
                });

                // Wrapper-Cleanup
                let wrapper = container.querySelector('.swiper-wrapper');
                if (wrapper) {
                    while (wrapper.firstChild) {
                        container.appendChild(wrapper.firstChild);
                    }
                    wrapper.remove();
                }

                // Entferne Swiper-Elemente
                let swiperElements = container.querySelectorAll('.swiper-lazy-preloader, .swiper-pagination');
                swiperElements.forEach(el => el.remove());

                if (shouldUseMacy) {
                    // Macy Setup
                    container.classList.add('macy-container');
                    items.forEach((item, index) => {
                        item.classList.add('macy-item');
                        if (index >= <?= $desktopVisibleItems ?>) {
                            item.classList.add('hidden-desktop');
                        }
                        if (index >= <?= $mobileVisibleItems ?>) {
                            item.classList.add('hidden-mobile');
                        }
                    });

                    if (showMoreContainer) {
                        showMoreContainer.style.display = 'block';
                    }

                    loadMacy(function () {
                        macyInstances[containerId] = Macy({
                            container: container,
                            trueOrder: true,
                            waitForImages: true,
                            margin: <?php echo $this->space_between ?: 20; ?>,
                            columns: <?= $this->masonry_spalten ?: 3 ?>,
                            breakAt: {
                                768: <?= $this->masonry_spalten_mobile ?: 2 ?>,
                            }
                        });

                        let images = container.querySelectorAll('img');
                        images.forEach(img => {
                            if (img.src.startsWith('data:image/gif;base64')) {
                                let sources = img.parentElement.querySelectorAll('source');
                                if (sources.length > 0) {
                                    img.src = sources[sources.length - 1].srcset;
                                }
                            }
                            img.addEventListener('load', () => {
                                if (macyInstances[containerId]) {
                                    macyInstances[containerId].recalculate(true);
                                    updateLazyLoading();
                                }
                            });
                        });
                    });
                } else {
                    // Swiper Setup
                    container.classList.add('swiper');
                    if (showMoreContainer) {
                        showMoreContainer.style.display = 'none';
                    }

                    wrapper = document.createElement('div');
                    wrapper.classList.add('swiper-wrapper');
                    Array.from(container.children).forEach(child => wrapper.appendChild(child));
                    container.appendChild(wrapper);

                    items.forEach(item => item.classList.add('swiper-slide'));

                    let pagination = document.createElement('div');
                    pagination.classList.add('swiper-pagination');
                    container.appendChild(pagination);

                    swiperInstances[containerId] = new Swiper('.swiper.content-slider_' + containerId, {
                        direction: 'horizontal',
                        loop: <?php echo $this->loop ? 'true' : 'false'; ?>,
                        lazy: false,
                        spaceBetween: <?php echo $this->space_between ?: 20; ?>,
                        speed: <?php echo $this->transition_time ?: 1500; ?>,
                        effect: <?php echo $this->slide_effect ? "'$this->slide_effect'" : "'slide'"; ?>,
                        <?php if ($this->autoplay): ?>
                        autoplay: {
                            delay: <?php echo $this->autoplay_time ?: 3000; ?>,
                        },
                        <?php endif; ?>
                        autoHeight: false,
                        <?php if ($this->slide_effect == "coverflow"): ?>
                        coverflowEffect: {
                            rotate: 50,
                            stretch: 0,
                            depth: 100,
                            modifier: 1,
                            slideShadows: true,
                        },
                        <?php endif; ?>
                        <?php if ($this->slide_effect == "fade"): ?>
                        fadeEffect: {
                            crossFade: true
                        },
                        <?php endif; ?>
                        <?php if (count($this->galery) > 1 || count($dataSorted) > 1): ?>
                        navigation: {
                            nextEl: '.content-slider_' + containerId + '.swiper-button-next',
                            prevEl: '.content-slider_' + containerId + '.swiper-button-prev',
                        },
                        pagination: {
                            el: '.content-slider_' + containerId + '.swiper-pagination',
                            clickable: true,
                        },
                        <?php endif; ?>
                        <?php if ($this->slides_per_view): ?>
                        <?php if ($this->slides_per_view > 1): ?>
                        slidesPerView: <?= (!empty($this->slides_per_view_mobile) && is_numeric($this->slides_per_view_mobile)) ? intval($this->slides_per_view_mobile) : 1 ?>,
                        breakpoints: {
                            768: {
                                slidesPerView: <?php echo $this->slides_per_view; ?>,
                            }
                        },
                        <?php else: ?>
                        slidesPerView: 1,
                        <?php endif; ?>
                        <?php else: ?>
                        slidesPerView: 'auto',
                        <?php endif; ?>
                        on: {
                            init: function () {
                                updateLazyLoadingForSwiper(this);
                                updateLazyLoading();
                            },
                            slideChange: function () {
                                updateLazyLoadingForSwiper(this);
                                updateLazyLoading();
                                // Event für bessere Kompatibilität triggern
                                document.dispatchEvent(new CustomEvent('swiper:slideChange', {
                                    detail: {swiper: this}
                                }));
                            }
                        }
                    });
                }

                initShowMoreButton();
            }

            function updateLazyLoadingForSwiper(swiper) {
                if (!swiper) return;

                const slidesPerView = swiper.params.slidesPerView;
                if (Number.isInteger(slidesPerView)) return;

                const currentIndex = swiper.activeIndex;
                const floorIndex = currentIndex + Math.floor(slidesPerView);
                const ceilIndex = currentIndex + Math.ceil(slidesPerView);

                [floorIndex, ceilIndex].forEach(index => {
                    if (index < swiper.slides.length) {
                        const slide = swiper.slides[index];
                        const mediaElements = slide.querySelectorAll('img[data-src], video[data-src], video.lazy');
                        mediaElements.forEach(element => {
                            if (window.VSM && window.VSM.lazyMediaLoader) {
                                window.VSM.lazyMediaLoader.handleNewElement(element);
                            }
                        });
                    }
                });
            }

            function initShowMoreButton() {
                const container = document.querySelector('.content-slider_' + containerId);
                if (!container) return;

                const showMoreContainer = container.closest('.ce--inner').querySelector('.show-more-container');
                if (!showMoreContainer) return;

                const showMoreButtonDesktop = showMoreContainer.querySelector('.show-more-button.show-more-desktop');
                const showMoreButtonMobile = showMoreContainer.querySelector('.show-more-button.show-more-mobile');

                const hiddenDesktopItems = container.parentElement.querySelectorAll('.macy-item.hidden-desktop');
                const hiddenMobileItems = container.parentElement.querySelectorAll('.macy-item.hidden-mobile');

                function updateButtonVisibility() {
                    const isMobile = window.innerWidth < 768;

                    if (isMobile) {
                        if (showMoreButtonMobile) {
                            showMoreButtonMobile.style.display = hiddenMobileItems.length > 0 ? 'inline-flex' : 'none';
                        }
                        if (showMoreButtonDesktop) {
                            showMoreButtonDesktop.style.display = 'none';
                        }
                    } else {
                        if (showMoreButtonDesktop) {
                            showMoreButtonDesktop.style.display = hiddenDesktopItems.length > 0 ? 'inline-flex' : 'none';
                        }
                        if (showMoreButtonMobile) {
                            showMoreButtonMobile.style.display = 'none';
                        }
                    }

                    showMoreContainer.style.display =
                        (hiddenDesktopItems.length > 0 || hiddenMobileItems.length > 0) ? 'block' : 'none';
                }

                function toggleItems(items, button) {
                    if (!items.length) return;

                    const isShowingMore = button.getAttribute('data-show-more') === 'true';
                    const className = button.classList.contains('show-more-desktop') ? 'hidden-desktop' : 'hidden-mobile';

                    if (isShowingMore) {
                        const itemsArray = Array.from(items);
                        itemsArray.sort((a, b) => {
                            return a.compareDocumentPosition(b) & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;
                        });

                        itemsArray.forEach((item, index) => {
                            item.style.animationDelay = `${index * 0.1}s`;
                            item.classList.remove(className);

                            if (item.hasAttribute('data-animation')) {
                                const animations = item.getAttribute('data-animation').split(' ');
                                item.classList.remove(...animations, 'animate__animated');
                                requestAnimationFrame(() => {
                                    item.classList.add(...animations, 'animate__animated');
                                });
                            }
                            if (item.hasAttribute('data-animation')) {
                                const animation = item.getAttribute('data-animation');
                                item.classList.remove(animation);
                                requestAnimationFrame(() => {
                                    item.classList.add(animation);
                                });
                            }
                        });

                        updateLazyLoading();
                    } else {
                        items.forEach(item => {
                            item.style.animationDelay = '0s';
                            item.classList.add(className);
                        });
                    }

                    button.textContent = isShowingMore ? 'Weniger anzeigen' : 'Mehr anzeigen';
                    button.setAttribute('data-show-more', isShowingMore ? 'false' : 'true');

                    if (macyInstances[containerId]) {
                        macyInstances[containerId].recalculate(true);
                        setTimeout(updateLazyLoading, 100);
                    }
                }

                if (showMoreButtonDesktop) {
                    const newDesktopButton = showMoreButtonDesktop.cloneNode(true);
                    showMoreButtonDesktop.parentNode.replaceChild(newDesktopButton, showMoreButtonDesktop);
                    newDesktopButton.addEventListener('click', () => toggleItems(hiddenDesktopItems, newDesktopButton));
                }

                if (showMoreButtonMobile) {
                    const newMobileButton = showMoreButtonMobile.cloneNode(true);
                    showMoreButtonMobile.parentNode.replaceChild(newMobileButton, showMoreButtonMobile);
                    newMobileButton.addEventListener('click', () => toggleItems(hiddenMobileItems, newMobileButton));
                }

                updateButtonVisibility();

                const resizeHandler = debounce(updateButtonVisibility, 250);
                window.removeEventListener('resize', resizeHandler);
                window.addEventListener('resize', resizeHandler);
            }

            function debounce(func, wait) {
                let timeout;
                return function executedFunction(...args) {
                    const later = () => {
                        clearTimeout(timeout);
                        func(...args);
                    };
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            }

            // Initialisierung
            initOrDestroySwiper(true);
            window.addEventListener('resize', debounce(() => initOrDestroySwiper(false), 250));
        });
    </script>
<?php endif; ?>