<?php


if (!isset($this->size)) {
    $this->{"size"} = "";
}
?>

    <div <?php echo $this->cssID; ?> class="content--element">
        <div class="ce--inner  <?php echo $this->class; ?>">


            <?= VSM_HelperFunctions\HeadlineHelper::generateHeadlineHTML(
                $this->topline,
                $this->headline,
                $this->subline,
                $this->hl,
                $this->animation_type,
                null,
                false,
                null
            ); ?>

            <?php

            use Contao\StringUtil;

            if ($this->selecttype == "multiple") {
                $unserializedData = unserialize($this->multiSRC);
                if (is_array($unserializedData)) {
                    $dataSorted = array_map([StringUtil::class, 'binToUuid'], $unserializedData);
                } else {
                    $dataSorted = [];
                }
            } else {
                $dataSorted = [];
            }
            ?>

            <div class="ce--content-slider offset-margin-sm-x <?php if ($this->show_pagination): ?>with-pagination<?php endif; ?> slider-<?= $this->style_type; ?> <?php if (count($this->galery) > $this->slides_per_view || count($dataSorted) > $this->slides_per_view) : ?>is-slider<?php endif; ?>">
                <?php $rand = rand(1, 100); ?>

                <?php if ($this->open_lightbox): ?>
                    <script type="text/javascript" defer>
                        document.addEventListener('DOMContentLoaded', function () {
                            new VenoBox({
                                selector: ".lightbox_<?= $rand;?>", //Items selector
                                infinigall: true, // Ermöglicht eine endlose Navigation durch die Galerie. Standardwert: false
                                maxWidth: '95%', // Maximale Breite des Lightbox-Fensters. Standardwert: '100%'
                                numeration: true, // Zeigt Nummerierung der aktuellen und Gesamtanzahl der Elemente in der Galerie an. Standardwert: false
                                spinner: 'flow', //  'plane' | 'chase' | 'bounce' | 'wave' | 'pulse' | 'flow' | 'swing' | 'circle' | 'circle-fade' | 'grid' | 'fold | 'wander'
                                initialScale: 0.9, // Anfangsgröße der Skalierungstransformation für Elemente. Standardwert: 0.9
                                transitionSpeed: 200, // Übergangsgeschwindigkeit für eingehende Elemente in Millisekunden. Standardwert: 500
                                fitView: true, // Passt Bilder an, um innerhalb der Höhe des Viewports zu passen. Standardwert: true
                            });
                        });
                    </script>
                <?php endif; ?>

                <?php if ($this->text_on_slider): ?>
                    <div class="slider-caption"
                         style="<?php if ($this->alternate_background_color): ?>background-color: <?= $this->alternate_background_color; ?>;<?php endif; ?> <?php if ($this->alternate_text_color): ?>color: <?= $this->alternate_text_color; ?>;<?php endif; ?>">
                        <?= $this->text_on_slider; ?>
                    </div>
                <?php endif; ?>

                <div class="swiper <?php if ($this->show_pagination): ?>with-pagination<?php endif; ?> content-slider_<?= $this->id; ?>">
                    <!-- Additional required wrapper -->
                    <div class="swiper-wrapper align-items-center">
                        <!-- Slides -->
                        <?php if ($dataSorted) : ?>
                            <?php
                            $length = count($dataSorted); // Anzahl der Elemente im Array

                            foreach ($dataSorted as $data) : ?>
                                <div class="swiper-slide text-center" data-aos="<?php if ($this->slide_animation_type) : ?><?php echo $this->slide_animation_type; ?><?php endif; ?>">
                                    <?php
                                    $slideText = is_object($data) && property_exists($data, 'slide_text') ? $data->slide_text : '';
                                    ?>
                                    <?= VSM_HelperFunctions\ImageHelper::generateImageHTML($data, $this->headline, $slideText, $this->size, null, true, $this->open_lightbox ? $rand : ""); ?>
                                </div>
                            <?php endforeach ?>
                        <?php else : ?>
                            <?php foreach ($this->galery as $slide) : ?>
                                <div class="swiper-slide text-center" data-aos="<?php if ($this->slide_animation_type) : ?><?php echo $this->slide_animation_type; ?><?php endif; ?>">
                                    <?= VSM_HelperFunctions\ImageHelper::generateImageHTML($slide->slide, $this->headline, $slide->slide_text, $slide->size, null, true, $this->open_lightbox ? $rand : ""); ?>
                                </div>
                            <?php endforeach ?>

                        <?php endif; ?>
                    </div>

                </div>
                <?php if (count($this->galery) > 1 || count($dataSorted) > 1) : ?>
                    <?php if ($this->show_pagination): ?>
                        <div class="content-slider_<?= $this->id; ?> swiper-pagination"></div>
                    <?php endif; ?>
                    <?php if ($this->show_arrows): ?>
                        <div class="content-slider_<?= $this->id; ?> swiper-button-prev"></div>
                        <div class="content-slider_<?= $this->id; ?> swiper-button-next"></div>
                    <?php endif; ?>
                <?php endif; ?>
            </div>
        </div>
    </div>


<?php if (VSM_HelperFunctions\EnvHelper::isFrontend()): ?>

<script type="text/javascript">
window.addEventListener('DOMContentLoaded', function () {
    let swiper_<?= $this->id; ?>;
    let macy_<?= $this->id; ?>;
    let lastWidth = window.innerWidth;

    function loadMacy(callback) {
        if (typeof Macy !== 'undefined') {
            callback();
        } else {
            setTimeout(function () {
                loadMacy(callback);
            }, 50);
        }
    }

    function initOrDestroySwiper(forceInit = false) {
        let currentWidth = window.innerWidth;
        let isMobile = currentWidth < 768;
        let shouldUseMacy = false;

        <?php if ($this->deactivate_slider === ''): ?>
        shouldUseMacy = false; // Immer Swiper verwenden
        <?php elseif ($this->deactivate_slider === 'desktop'): ?>
        shouldUseMacy = !isMobile;
        <?php elseif ($this->deactivate_slider === 'mobile'): ?>
        shouldUseMacy = isMobile;
        <?php endif; ?>

        // Überprüfen, ob sich die Breite tatsächlich geändert hat oder ob eine Initialisierung erzwungen wird
        if (!forceInit && Math.abs(currentWidth - lastWidth) < 50) {
            return; // Keine signifikante Änderung, nicht neu initialisieren
        }

        lastWidth = currentWidth;

        let container = document.querySelector('.content-slider_<?= $this->id; ?>');

        // Immer zuerst aufräumen
        if (swiper_<?= $this->id; ?> && !swiper_<?= $this->id; ?>.destroyed) {
            swiper_<?= $this->id; ?>.destroy(true, true);
        }
        if (macy_<?= $this->id; ?>) {
            macy_<?= $this->id; ?>.remove();
            macy_<?= $this->id; ?> = null;
        }

        // Entferne alle Klassen und setze die Struktur zurück
        container.classList.remove('swiper', 'macy-container');
        let items = container.querySelectorAll('.swiper-slide, .macy-item');
        items.forEach(item => {
            item.classList.remove('swiper-slide', 'macy-item');
        });

        let wrapper = container.querySelector('.swiper-wrapper');
        if (wrapper) {
            while (wrapper.firstChild) {
                container.appendChild(wrapper.firstChild);
            }
            wrapper.remove();
        }

        // Entferne Swiper-spezifische Elemente
        let swiperElements = container.querySelectorAll('.swiper-lazy-preloader, .swiper-pagination');
        swiperElements.forEach(el => el.remove());

        if (shouldUseMacy) {
            // Macy Setup
            container.classList.add('macy-container');
            items.forEach(item => item.classList.add('macy-item'));

            <?php
            // Standardwerte setzen
            $defaultDesktopColumns = 3;
            $defaultMobileColumns = 2;

            // Werte aus den Feldern holen oder Standardwerte verwenden
            $desktopColumns = $this->masonry_spalten ?: $defaultDesktopColumns;
            $mobileColumns = $this->masonry_spalten_mobile ?: $defaultMobileColumns;
            ?>
            loadMacy(function () {
                macy_<?= $this->id; ?> = Macy({
                    container: '.macy-container',
                    trueOrder: true,
                    waitForImages: true,
                    margin: <?php echo $this->space_between ?: 20; ?>,
                    columns: <?= $desktopColumns ?>,
                    breakAt: {
                        768: <?= $mobileColumns ?>,
                    }
                });

                // Lade Bilder und berechne Layout neu
                let images = container.querySelectorAll('img');
                images.forEach(img => {
                    if (img.src.startsWith('data:image/gif;base64')) {
                        let sources = img.parentElement.querySelectorAll('source');
                        if (sources.length > 0) {
                            img.src = sources[sources.length - 1].srcset;
                        }
                    }
                    img.addEventListener('load', () => {
                        macy_<?= $this->id; ?>.recalculate(true);
                    });
                });
            });
        } else {
            // Swiper Setup
            container.classList.add('swiper');

            wrapper = document.createElement('div');
            wrapper.classList.add('swiper-wrapper');
            Array.from(container.children).forEach(child => wrapper.appendChild(child));
            container.appendChild(wrapper);

            items.forEach(item => item.classList.add('swiper-slide'));

            let pagination = document.createElement('div');
            pagination.classList.add('swiper-pagination');
            container.appendChild(pagination);

            swiper_<?= $this->id; ?> = new Swiper('.swiper.content-slider_<?php echo $this->id; ?>', {
                direction: 'horizontal',
                loop: <?php echo $this->loop ? 'true' : 'false'; ?>,
                lazy: true,
                spaceBetween: <?php echo $this->space_between ?: 20; ?>,
                speed: <?php echo $this->transition_time ?: 1500; ?>,
                effect: <?php echo $this->slide_effect ? "'$this->slide_effect'" : "'slide'"; ?>,
                <?php if ($this->autoplay): ?>
                autoplay: {
                    delay: <?php echo $this->autoplay_time ?: 3000; ?>,
                },
                <?php endif; ?>
                autoHeight: false,
                <?php if ($this->slide_effect == "coverflow"): ?>
                coverflowEffect: {
                    rotate: 50,
                    stretch: 0,
                    depth: 100,
                    modifier: 1,
                    slideShadows: true,
                },
                <?php endif; ?>
                <?php if ($this->slide_effect == "fade"): ?>
                fadeEffect: {
                    crossFade: true
                },
                <?php endif; ?>
                <?php if (count($this->galery) > 1 || count($dataSorted) > 1): ?>
                navigation: {
                    nextEl: '.content-slider_<?= $this->id; ?>.swiper-button-next',
                    prevEl: '.content-slider_<?= $this->id; ?>.swiper-button-prev',
                },
                pagination: {
                    el: '.content-slider_<?php echo $this->id; ?>.swiper-pagination',
                    clickable: true,
                },
                <?php endif; ?>
                <?php if ($this->slides_per_view): ?>
                <?php if ($this->slides_per_view > 1): ?>
                 slidesPerView: <?= (!empty($this->slides_per_view_mobile) && is_numeric($this->slides_per_view_mobile)) ? intval($this->slides_per_view_mobile) : 1 ?>,
                breakpoints: {
                    768: {
                        slidesPerView: <?php echo $this->slides_per_view ; ?>,
                    }
                }
                <?php else: ?>
                slidesPerView: 1,
                <?php endif; ?>
                <?php else: ?>
                slidesPerView: 'auto',
                <?php endif; ?>
            });
        }
    }

    // Debounce-Funktion
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    // Führe die Funktion beim Laden der Seite aus und erzwinge die Initialisierung
    initOrDestroySwiper(true);

    // Führe die Funktion bei Änderung der Fenstergröße aus, mit Debounce
    window.addEventListener('resize', debounce(() => initOrDestroySwiper(false), 250));
});
</script>
<?php endif; ?>