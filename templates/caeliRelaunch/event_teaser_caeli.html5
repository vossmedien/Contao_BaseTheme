<div data-animation="animate__fadeIn" class="event layout_teaser<?= $this->classList ?>">
    <div class="row g-0 align-items-end">
        <div class="col-md">
            <div class="d-flex flex-column gap-1">
                <h3 class="m-0"><?= html_entity_decode($this->title) ?></h3>

                <?php
                // Locale korrekt aus dem Request Stack holen
                $currentRequest = \Contao\System::getContainer()->get('request_stack')->getCurrentRequest();
                $locale = 'de_DE'; // Standard-Fallback
                if ($currentRequest) {
                    $requestLocale = $currentRequest->getLocale();
                    if (!empty($requestLocale)) {
                        $locale = str_replace('-', '_', $requestLocale); // z.B. de_DE aus de-CH wird de_CH
                    }
                }

                $dateInput = (string)$this->date; // Sicherstellen, dass es ein String ist
                $formattedDateOutput = ''; // Variable für die finale Ausgabe

                // Prüfen, ob IntlDateFormatter verfügbar ist
                if (!class_exists('IntlDateFormatter')) {
                    $formattedDateOutput = $dateInput; // Fallback, wenn intl Extension nicht geladen ist
                } else {
                    try {
                        if (str_contains($dateInput, '–')) {
                            // Datumsbereich
                            list($startDateStr, $endDateStr) = explode('–', $dateInput, 2);

                            $parseFormat = 'd.m.Y'; // Annahme des Eingabeformats
                            $startDateTime = \DateTimeImmutable::createFromFormat($parseFormat, trim($startDateStr));
                            $endDateTime = \DateTimeImmutable::createFromFormat($parseFormat, trim($endDateStr));

                            if ($startDateTime && $endDateTime) {
                                // Prüfen ob gleicher Monat und gleiches Jahr
                                if ($startDateTime->format('m.Y') === $endDateTime->format('m.Y')) {
                                    // Format: 27. - 28. August 2025
                                    $fmtDay = new \IntlDateFormatter($locale, \IntlDateFormatter::NONE, \IntlDateFormatter::NONE, null, null, 'dd');
                                    $fmtMonthYear = new \IntlDateFormatter($locale, \IntlDateFormatter::NONE, \IntlDateFormatter::NONE, null, null, 'MMMM yyyy');

                                    $startDayFormatted = $fmtDay->format($startDateTime);
                                    $endDayFormatted = $fmtDay->format($endDateTime);
                                    $monthYearFormatted = $fmtMonthYear->format($endDateTime); // Monat und Jahr vom Enddatum

                                    $formattedDateOutput = $startDayFormatted . '. - ' . $endDayFormatted . '. ' . $monthYearFormatted;
                                } else {
                                    // Unterschiedlicher Monat oder Jahr: z.B. 01. Januar 2025 – 02. Februar 2025
                                    $fmtFull = new \IntlDateFormatter($locale, \IntlDateFormatter::NONE, \IntlDateFormatter::NONE, null, null, 'dd. MMMM yyyy');
                                    $formattedDateOutput = $fmtFull->format($startDateTime) . ' – ' . $fmtFull->format($endDateTime);
                                }
                            } else {
                                $formattedDateOutput = $dateInput; // Fallback, wenn Parsen des Datums fehlschlägt
                            }
                        } else {
                            // Einzelnes Datum: 02. Oktober 2025
                            $dateTime = \DateTimeImmutable::createFromFormat('d.m.Y', $dateInput);
                            if ($dateTime) {
                                $fmt = new \IntlDateFormatter($locale, \IntlDateFormatter::NONE, \IntlDateFormatter::NONE, null, null, 'dd. MMMM yyyy');
                                $formattedDateOutput = $fmt->format($dateTime);
                            } else {
                                $formattedDateOutput = $dateInput; // Fallback, wenn Parsen fehlschlägt
                            }
                        }
                    } catch (\Exception $e) {
                        // Im Fehlerfall das ursprüngliche Datum ausgeben
                        $formattedDateOutput = $dateInput;
                        // Optional: Fehler loggen für Debugging
                        // \Contao\System::getContainer()->get('monolog.logger.contao')->error('Fehler bei der Datumsformatierung in event_teaser_caeli: ' . $e->getMessage());
                    }
                }

                // Sicherstellen, dass $formattedDateOutput immer einen Wert hat
                if (empty($formattedDateOutput) && isset($this->date)) {
                    $formattedDateOutput = $this->date; // Letzter Fallback
                }

                // datetime Attribut für <time> Tag generieren
                $timeTagDatetimeAttribute = '';
                if (isset($this->startDateTimeObject) && $this->startDateTimeObject instanceof \DateTimeInterface) {
                    $timeTagDatetimeAttribute = $this->startDateTimeObject->format('c');
                } elseif (!empty($this->startTime)) { // Fallback auf startTime (Unix Timestamp)
                    $timeTagDatetimeAttribute = date('c', (int)$this->startTime);
                } elseif (!empty($this->startDate)) { // Fallback auf startDate (Unix Timestamp, nur Datum)
                    $timeTagDatetimeAttribute = date('Y-m-d', (int)$this->startDate);
                }

                ?>
                <p class="h3 fw-normal date mt-1 mb-0">
                    <time datetime="<?= $timeTagDatetimeAttribute ?>">
                        <?= $formattedDateOutput ?><?php if ($this->time && strpos($formattedDateOutput, (string)$this->time) === false): ?> <?= $this->time ?><?php endif; ?>
                    </time>


                    <?php if ($this->location): ?>
                        <br>
                        <span class=" location fw-normal m-0"><?= $this->location ?><?php if ($this->address): ?> (<?= $this->address ?>)<?php endif; ?></span><?php if ($this->eventStatus): ?> | <?= $this->eventStatus ?><?php endif; ?>
                    <?php endif; ?>

                </p>
            </div>
        </div>
        <div class="col-md-auto mt-2 mt-md-0">
            <div class="d-flex justify-content-end flex-row gap-1">
                <?php if ($this->onSiteAppointmentLink ?? null): ?>
                    <div>
                        <a href="<?= $this->onSiteAppointmentLink ?>" target="_blank" class="btn btn-sm btn-outline-primary">
                            <?= $GLOBALS['TL_LANG']['MSC']['onSiteAppointment'] ?>
                        </a>
                    </div>
                <?php endif; ?>

                                <?php 

                // Prüfen ob learnMoreLink aus den Template-Daten verfügbar ist
                $learnMoreLink = $this->learnMoreLink ?? $this->arrData['learnMoreLink'] ?? '';
                ?>
                <?php if (!empty($learnMoreLink)): ?>
                    <div>
                        <a href="<?= $learnMoreLink ?>" title="<?= $this->more ?>" class="btn btn-sm btn-outline-primary">
                            <?= $this->more ?>
                        </a>
                    </div>
                <?php elseif ($this->hasDetails): ?>
                    <div>
                        <a href="<?= $this->href ?>" title="<?= $this->readMore ?>" class="btn btn-sm btn-outline-primary">
                            <?= $this->readMore ?>
                        </a>
                    </div>
                <?php endif; ?>
            </div>

        </div>
    </div>
</div>


<?php

// This template is used as an event list template by default, so we only add
// JSON-LD data in case this is an event without a reader
if (!$this->hasReader) {
    $this->addSchemaOrg($this->getSchemaOrgData());
}
