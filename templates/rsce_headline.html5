<?php
// Helfer für die Headline generieren
// generateHeadlineHTML($topline, $headline, $subline, $headlineType, $animation = null, $headlineClass = null, $onlystyle = false, $additionalAttributes = null)

use Contao\StringUtil;
use Vsm\VsmHelperTools\Helper\EnvHelper; // Hinzufügen für Frontend-Check
use Vsm\VsmHelperTools\Helper\ImageHelper; // Hinzufügen für Bildgenerierung

// NEUE LOGIK für globale Animation
$elementAnimation = null; // Animation für das äußerste Element-Div
$applyIndividualAnimations = false; // Flag, ob individuelle Animationen für Unter-Elemente angewendet werden

// Prüfen, ob eine Hauptanimation für das gesamte Element gesetzt ist
if (!empty($this->animation_type_element) && $this->animation_type_element !== 'no-animation') {
    $elementAnimation = $this->animation_type_element; // Diese Animation wird auf den Haupt-Wrapper angewendet
    $applyIndividualAnimations = false; // Individuelle Animationen der Unterelemente werden NICHT angewendet
} else {
    // Keine globale Animation - individuelle Animationen sind erlaubt
    $applyIndividualAnimations = true;
}

// Animationen für die verschiedenen Teile vorbereiten:
if ($applyIndividualAnimations) {
    // Globale Animation ist NICHT aktiv. Individuelle Einstellungen verwenden.
    // WICHTIG: Headline bekommt KEINE Animation vom Helper, sondern wird in ein separates animiertes Div gepackt
    $headlineAnimForHelper = 'no-animation'; // Helper soll KEINE Animation machen

    // Für data-attributes: 'no-animation' oder leer soll zu null werden, damit das Attribut nicht gesetzt wird.
    $headlineAnimation = (!empty($this->animation_type_headline) && $this->animation_type_headline !== 'no-animation') ? $this->animation_type_headline : null;
    $headlineColumnAnim = (!empty($this->animation_type_headline_column) && $this->animation_type_headline_column !== 'no-animation') ? $this->animation_type_headline_column : null;
    $contentColumnAnim = (!empty($this->animation_type_content) && $this->animation_type_content !== 'no-animation') ? $this->animation_type_content : null;
    $slideAnim = (!empty($this->slide_animation_type) && $this->slide_animation_type !== 'no-animation') ? $this->slide_animation_type : null;
} else {
    // Globale Animation ist aktiv - ALLE Unterelemente bekommen KEINE Animationen
    $headlineAnimForHelper = 'no-animation'; // Helper explizit anweisen, keine Animation zu machen.
    $headlineAnimation = null;
    $headlineColumnAnim = null;
    $contentColumnAnim = null;
    $slideAnim = null;
}

$additionalHeadlineAttributes = []; // Als Array initialisieren
if (!empty($this->is_quote) && $this->is_quote) {
    $additionalHeadlineAttributes[] = 'is-quote';
}

if ($this->two_columns && !$this->headline_above_columns &&
    empty($this->second_content) &&
    empty($headlineColumnImageHTML) &&
    empty($headlineColumnButtonsHTML)) {
    $additionalHeadlineAttributes[] = 'mb-lg-0';
}

// Headline IMMER ohne Animation vom Helper generieren
$headlineHTML = Vsm\VsmHelperTools\Helper\HeadlineHelper::generateHeadlineHTML(
    $this->topline,
    $this->headline,
    $this->subline,
    $this->headline_type,
    'no-animation', // IMMER keine Animation vom Helper
    null, // Sechster Parameter (headlineClass) bleibt null
    (bool)$this->onlystyle,
    implode(' ', $additionalHeadlineAttributes) // Attribute als String übergeben
);

// Helfer für die Buttons generieren
$buttonsHTML = '';
if (!empty($this->buttons)) {
    $buttonsHTML = Vsm\VsmHelperTools\Helper\ButtonHelper::generateButtonHTML($this->buttons);
}

// Standardwerte und Berechnungen für zweispaltiges Layout
$colWidthContent = '50';
$bsColContent = 6;
$bsColHeadline = 6;
$orderContentClass = 'order-1';
$orderHeadlineClass = 'order-2';

// Bilddaten vorbereiten
$imagesData = [];
$imageUuids = [];
if ($this->add_images && !empty($this->multiSRC)) {
    $unserialized = StringUtil::deserialize($this->multiSRC);
    if (is_array($unserialized)) {
        $imageUuids = $unserialized;

        // Filterung bleibt wichtig, falls ungültige Einträge oder Verzeichnisse dabei sind
        $imageUuids = array_filter($imageUuids, function ($uuid) {
            if (!is_string($uuid) || strlen($uuid) !== 36) { // Grundlegende UUID-String-Prüfung
                return false;
            }
            $file = \Contao\FilesModel::findByUuid($uuid);
            return $file !== null && $file->type === 'file';
        });
    }
}

$hasImages = !empty($imageUuids);
$rand = rand(1, 1000); // Zufällige ID für Lightbox/Slider
$spacingClass = $this->image_spacing_class ?: 'mb-1'; // Abstandsklasse holen oder Fallback
$totalImages = count($imageUuids);

if ($this->two_columns) {
    $colWidthContent = $this->column_width_content ?? '50'; // Standard 50%
    $colWidthContentFloat = (float)$colWidthContent;
    $colWidthHeadlineFloat = 100 - $colWidthContentFloat;

    // Bootstrap Spaltenklassen mit verbesserter Zuordnung
    switch ($colWidthContent) {
        case '16.67':
            $bsColContent = 2; // 1/6
            break;
        case '20':
            $bsColContent = 2; // 1/5 (näherungsweise)
            break;
        case '25':
            $bsColContent = 3; // 1/4
            break;
        case '30':
            $bsColContent = 4; // näherungsweise
            break;
        case '33.33':
            $bsColContent = 4; // 1/3
            break;
        case '40':
            $bsColContent = 5; // 2/5 (näherungsweise)
            break;
        case '41.67':
            $bsColContent = 5; // 5/12
            break;
        case '50':
            $bsColContent = 6; // 1/2
            break;
        case '58.33':
            $bsColContent = 7; // 7/12
            break;
        case '60':
            $bsColContent = 7; // 3/5 (näherungsweise)
            break;
        case '66.67':
            $bsColContent = 8; // 2/3
            break;
        case '70':
            $bsColContent = 8; // näherungsweise
            break;
        case '75':
            $bsColContent = 9; // 3/4
            break;
        case '80':
            $bsColContent = 10; // 4/5 (näherungsweise)
            break;
        case '83.33':
            $bsColContent = 10; // 5/6
            break;
        default:
            $bsColContent = round(12 * ($colWidthContentFloat / 100));
            break;
    }

    // Sicherstellen, dass die Summe 12 ergibt und keine Spalte 0 ist
    $bsColContent = max(1, min(11, $bsColContent));
    $bsColHeadline = 12 - $bsColContent;

    // Klassen für Spaltenreihenfolge basierend auf der Auswahl 'column_order'
    $orderHeadlineClass = 'order-lg-1 order-1'; // Standard: HL Mobil, HL Desktop
    $orderContentClass = 'order-lg-2 order-2'; // Standard: CO Mobil, CO Desktop

    switch ($this->column_order) {
        case 'hl_co': // Mobil: HL, Desktop: CO
            $orderHeadlineClass = 'order-lg-2 order-1';
            $orderContentClass = 'order-lg-1 order-2';
            break;
        case 'co_hl': // Mobil: CO, Desktop: HL
            $orderHeadlineClass = 'order-lg-1 order-2';
            $orderContentClass = 'order-lg-2 order-1';
            break;
        case 'co_co': // Mobil: CO, Desktop: CO
            $orderHeadlineClass = 'order-lg-2 order-2';
            $orderContentClass = 'order-lg-1 order-1';
            break;
        // Fall 'hl_hl' ist der Standard und bereits gesetzt
    }
}

// Kopfbild vorbereiten
$headerImageHTML = '';
if ($this->add_header_image && $this->header_image) {
    $headerImageHTML = Vsm\VsmHelperTools\Helper\ImageHelper::generateImageHTML(
        $this->header_image,
        null, // Kein Alt-Text aus Headline
        null, // Keine Beschreibung
        $this->header_image_size, // Gewählte Bildgröße
        null, // Keine CSS-Klasse extra
        false, // Korrektur: Auf true geändert, um Figure/Picture zu erzwingen
        false // Keine Lightbox per Default (kann man anpassen)
    );
}

// Bild für Headline-Spalte vorbereiten
$headlineColumnImageHTML = '';
if ($this->two_columns && $this->add_second_content && $this->add_headline_column_image && $this->headline_column_image) {
    $lightboxIdHeadlineColumn = null;
    if ($this->headline_column_open_lightbox) {
        $lightboxIdHeadlineColumn = 'lightbox_hl_col_' . $this->id . '_' . $rand;
    }
    $headlineColumnImageHTML = Vsm\VsmHelperTools\Helper\ImageHelper::generateImageHTML(
        $this->headline_column_image,
        null,
        null,
        $this->headline_column_image_size,
        null,
        false, // Ggf. auf true ändern für figure/picture
        $lightboxIdHeadlineColumn
    );
}

// Helfer für die Buttons der Headlinespalte generieren
$headlineColumnButtonsHTML = '';
if ($this->two_columns && $this->add_second_content && !empty($this->headline_column_buttons)) {
    $headlineColumnButtonsHTML = Vsm\VsmHelperTools\Helper\ButtonHelper::generateButtonHTML($this->headline_column_buttons);
}

?>

<div <?php if($elementAnimation):?>data-animation="<?= $elementAnimation;?>"<?php endif;?> <?php echo $this->cssID; ?> class="content--element  <?php echo $this->class; ?> <?php if ($this->two_columns): ?>layout-two-columns<?php else: ?>layout-one-column<?php endif; ?>">
    <div class="ce--inner  <?= $this->columns_container_css_class ?>">

        <?php // --- Kopfbild Ausgabe --- ?>
        <?php if ($headerImageHTML): ?>
            <div class="header-image mb-4 mb-md-gap">
                <?= $headerImageHTML; ?>
            </div>
        <?php endif; ?>

        <div>
        <?php if ($this->two_columns): ?>
            <?php // --- ZWEISPALTIG --- ?>

            <?php if ($this->headline_above_columns): ?>
             <div class="">
                   <div <?php if($headlineAnimation): ?>data-animation="<?= $headlineAnimation; ?>"<?php endif; ?> class="headline-above-columns">
                       <?= $headlineHTML; // Headline oberhalb der Spalten ?>
                   </div>
             </div>
            <?php endif; ?>

            <?php // Wrapper für die row, dem die columns_container_css_class hinzugefügt wird ?>
            <div <?php if (!$this->two_columns && !empty($this->columns_container_css_class)): ?>class="<?= $this->columns_container_css_class ?>"<?php endif; ?> >
                <div class="row g-lg-3 <?php if ($this->column_vertical_alignment): ?><?= $this->column_vertical_alignment ?><?php endif; ?>">

                    <?php // --- Headlinespalte --- ?>
                    <?php
                        // Animation für die Headlinespalte
                        $headlineColumnClasses = ['headline-column'];
                        if ($this->headline_column_css_class) {
                            $headlineColumnClasses[] = $this->headline_column_css_class;
                        }
                    ?>
                    <div <?php if($headlineColumnAnim): ?>data-animation="<?= $headlineColumnAnim; ?>"<?php endif; ?> class="col-12 col-lg-<?= $bsColHeadline; ?> <?= $orderHeadlineClass; ?> <?= implode(' ', $headlineColumnClasses); ?>">
                         <div class="">
                            <?php if (!$this->headline_above_columns): ?>
                                <?php // Headline in separates animiertes Div packen, wenn sie nicht oberhalb der Spalten ist ?>
                                <div <?php if($headlineAnimation && !$headlineColumnAnim): ?>data-animation="<?= $headlineAnimation; ?>"<?php endif; ?> class="headline-wrapper">
                                    <?= $headlineHTML; ?>
                                </div>
                            <?php endif; ?>

                            <?php if ($this->add_second_content && $this->second_content): ?>
                                <?php // Der Text bekommt eine Animation, wenn die Headline-Spalte selbst keine hat ?>
                                <div <?php if(!$headlineColumnAnim && $headlineAnimation): ?>data-animation="<?= $headlineAnimation; ?>"<?php endif; ?> class="text">
                                    <?= $this->second_content; ?>
                                </div>
                            <?php endif; ?>

                            <?php // --- Bild für Headline-Spalte Ausgabe --- ?>
                            <?php if ($headlineColumnImageHTML): ?>
                                <div <?php if(!$headlineColumnAnim && $headlineAnimation): ?>data-animation="<?= $headlineAnimation; ?>"<?php endif; ?> class="headline-column-image mt-3">
                                    <?= $headlineColumnImageHTML; ?>
                                </div>
                            <?php endif; ?>

                            <?php // --- Buttons für Headline-Spalte Ausgabe --- ?>
                            <?php if ($headlineColumnButtonsHTML): ?>
                                <?php
                                    $headlineColumnButtonAlignmentClass = $this->headline_column_button_alignment ?: 'text-lg-start';
                                ?>
                                <div <?php if(!$headlineColumnAnim && $headlineAnimation): ?>data-animation="<?= $headlineAnimation; ?>"<?php endif; ?> class="buttons <?= $headlineColumnButtonAlignmentClass; ?> mt-4">
                                    <?= $headlineColumnButtonsHTML; ?>
                                </div>
                            <?php endif; ?>
                         </div>
                    </div>

                    <?php // --- Textspalte --- ?>
                    <div class="col-12 col-lg-<?= $bsColContent; ?> <?= $orderContentClass; ?> <?php if ($this->content_column_css_class): ?><?= $this->content_column_css_class ?><?php endif; ?>">
                        <div <?php if($contentColumnAnim): ?>data-animation="<?= $contentColumnAnim; ?>"<?php endif; ?> class="content-column <?php if((!$this->headline || $this->second_content) && ($this->column_order == "hl_hl" || $this->column_order == "hl_co")):?>mt-4 mt-lg-0<?php endif;?>">
                            <?php if ($this->desc): ?>
                                <div class="text">
                                    <?= $this->desc; ?>
                                </div>
                            <?php endif; ?>

                            <?php // --- Bilder Logik Start --- ?>
                            <?php if ($hasImages): ?>
                                <div class="images-section   <?php if ($this->desc): ?>mt-3<?php endif;?>  <?php if (!$headerImageHTML): ?>header-image<?php endif;?>">
                                    <?php // --- Slider/Listen Container (HTML wird immer gerendert, JS entscheidet) --- ?>
                                    <div class="ce--content-slider content-slider-in-headline <?php if ($this->show_pagination): ?>with-pagination<?php endif; ?> <?php if ($totalImages > 1) : ?>is-slider<?php endif; ?>"
                                         data-slider-id="<?= $this->id; ?>_<?= $rand; ?>"
                                         data-deactivate-slider="<?= $this->deactivate_slider ?: '' ?>"
                                         data-image-count="<?= $totalImages ?>">
                                        <?php if ($this->open_lightbox): ?>
                                        <script type="text/javascript" defer>
                                            document.addEventListener('DOMContentLoaded', function () {
                                                if (typeof VenoBox === 'function') {
                                                    new VenoBox({
                                                        selector: ".lightbox_<?= $this->id;?>_<?= $rand;?>",
                                                        infinigall: true,
                                                        maxWidth: '95%',
                                                        numeration: true,
                                                        spinner: 'flow',
                                                        initialScale: 0.9,
                                                        transitionSpeed: 200,
                                                        fitView: true,
                                                    });
                                                }
                                            });
                                        </script>
                                        <?php endif; ?>

                                        <div class="image-container content-slider_<?= $this->id; ?>_<?= $rand; ?>">
                                            <div class="image-list-wrapper align-items-center">
                                                <?php foreach ($imageUuids as $index => $uuid) : ?>
                                                    <?php $isLast = ($index === $totalImages - 1); ?>
                                                    <div class="image-list-item text-center" <?php if($slideAnim): ?>data-animation="<?php echo $slideAnim; ?>"<?php endif; ?>>
                                                        <?= ImageHelper::generateImageHTML($uuid, null, null, $this->headline_image_size, null, false, $this->open_lightbox ? $this->id.'_'.$rand : ""); ?>
                                                    </div>
                                                <?php endforeach; ?>
                                            </div>
                                        </div>

                                        <?php if ($totalImages > 1) : // Controls nur bei mehr als 1 Bild ?>
                                            <?php if ($this->show_pagination): ?>
                                                <div class="swiper-pagination content-slider_<?= $this->id; ?>_<?= $rand; ?>"></div>
                                            <?php endif; ?>
                                            <?php if ($this->show_arrows): ?>
                                                <div class="swiper-button-prev content-slider_<?= $this->id; ?>_<?= $rand; ?>"></div>
                                                <div class="swiper-button-next content-slider_<?= $this->id; ?>_<?= $rand; ?>"></div>
                                            <?php endif; ?>
                                        <?php endif; ?>
                                    </div>
                                </div>
                            <?php endif; ?>
                             <?php // --- Bilder Logik Ende --- ?>

                            <?php if ($buttonsHTML): ?>
                                <?php
                                    $buttonAlignmentClass = $this->button_group_text_alignment ?: 'text-start';
                                ?>
                                <div class="buttons <?= $buttonAlignmentClass; ?>  <?php if ($hasImages || $this->desc): ?>mt-4<?php endif;?>">
                                    <?= $buttonsHTML; ?>
                                </div>
                            <?php endif; ?>
                        </div>
                    </div>
                </div>
            </div> <?php // Schließendes Div für den Row-Wrapper ?>

        <?php else: ?>
            <?php // --- EINSPALTIG --- ?>

            <?php // Headline in separates animiertes Div packen ?>
            <div <?php if($headlineAnimation): ?>data-animation="<?= $headlineAnimation; ?>"<?php endif; ?> class="headline-wrapper">
                <?= $headlineHTML; // Headline mit separater Animation ?>
            </div>

            <?php if ($this->desc): ?>
                <div <?php if($contentColumnAnim):?>data-animation="<?= $contentColumnAnim;?>"<?php endif;?> class="text">
                    <?= $this->desc; ?>
                </div>
            <?php endif; ?>

            <?php // --- Bilder Logik Start (Einspaltig) --- ?>
            <?php if ($hasImages): ?>
                <div class="images-section mt-3">
                     <?php // --- Slider/Listen Container (HTML wird immer gerendert, JS entscheidet) --- ?>
                     <div class="ce--content-slider content-slider-in-headline <?php if ($this->show_pagination): ?>with-pagination<?php endif; ?> <?php if ($totalImages > 1) : ?>is-slider<?php endif; ?>"
                         data-slider-id="<?= $this->id; ?>_<?= $rand; ?>"
                         data-deactivate-slider="<?= $this->deactivate_slider ?: '' ?>"
                         data-image-count="<?= $totalImages ?>">
                        <?php if ($this->open_lightbox): ?>
                        <script type="text/javascript" defer>
                            document.addEventListener('DOMContentLoaded', function () {
                                if (typeof VenoBox === 'function') {
                                    new VenoBox({
                                        selector: ".lightbox_<?= $this->id;?>_<?= $rand;?>",
                                        infinigall: true,
                                        maxWidth: '95%',
                                        numeration: true,
                                        spinner: 'flow',
                                        initialScale: 0.9,
                                        transitionSpeed: 200,
                                        fitView: true,
                                    });
                                }
                            });
                        </script>
                        <?php endif; ?>

                        <div class="image-container content-slider_<?= $this->id; ?>_<?= $rand; ?>">
                            <div class="image-list-wrapper align-items-center">
                                <?php foreach ($imageUuids as $index => $uuid) : ?>
                                    <?php $isLast = ($index === $totalImages - 1); ?>
                                    <div class="text-center image-list-item" <?php if($slideAnim): ?>data-animation="<?php echo $slideAnim; ?>"<?php endif; ?>>
                                        <?= ImageHelper::generateImageHTML($uuid, null, null, $this->headline_image_size, null, false, $this->open_lightbox ? $this->id.'_'.$rand : ""); ?>
                                    </div>
                                <?php endforeach; ?>
                            </div>
                        </div>

                        <?php if ($totalImages > 1) : // Controls nur bei mehr als 1 Bild ?>
                            <?php if ($this->show_pagination): ?>
                                <div class="swiper-pagination content-slider_<?= $this->id; ?>_<?= $rand; ?>"></div>
                            <?php endif; ?>
                            <?php if ($this->show_arrows): ?>
                                <div class="swiper-button-prev content-slider_<?= $this->id; ?>_<?= $rand; ?>"></div>
                                <div class="swiper-button-next content-slider_<?= $this->id; ?>_<?= $rand; ?>"></div>
                            <?php endif; ?>
                        <?php endif; ?>
                    </div>
                </div>
            <?php endif; ?>
            <?php // --- Bilder Logik Ende (Einspaltig) --- ?>

            <?php if ($buttonsHTML): ?>
                 <div class="buttons text-start mt-4">
                    <?= $buttonsHTML; ?>
                 </div>
            <?php endif; ?>

        <?php endif; ?>
        </div>
    </div>

    <?php // --- Swiper JS Initialisierung --- ?>
<?php // Angepasst: JS wird geladen, wenn Bilder vorhanden sind ?>
<?php if ($this->add_images && EnvHelper::isFrontend()): ?>
<script type="text/javascript">
    window.addEventListener('DOMContentLoaded', function() {
        const sliderContainers = document.querySelectorAll('.ce--content-slider[data-slider-id][data-deactivate-slider]');
        const swiperInstances = {}; // Zum Speichern erstellter Instanzen

        // Debounce Funktion (verhindert zu häufige Ausführung bei Resize)
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Funktion zum Aktualisieren des Anzeigemodus (Slider oder Liste)
        function updateDisplayMode(outerContainer) {
            const sliderId = outerContainer.getAttribute('data-slider-id');
            const deactivateOption = outerContainer.getAttribute('data-deactivate-slider');
            const imageCount = parseInt(outerContainer.getAttribute('data-image-count') || '0', 10);
            const imageContainerSelector = '.image-container.content-slider_' + sliderId;
            const imageContainerElement = outerContainer.querySelector(imageContainerSelector);

            if (!imageContainerElement || typeof Swiper === 'undefined') {
                 // Fehlermeldungen bleiben wie zuvor
                return;
            }

            const wrapperElement = imageContainerElement.querySelector('.image-list-wrapper');
            const itemElements = imageContainerElement.querySelectorAll('.image-list-item');
            const spacing = "<?= $spacingClass ?>";

            // Funktion zur Prüfung, ob Swiper initialisiert werden soll
            function shouldInitializeSwiper() {
                // Nur initialisieren, wenn mehr als 1 Bild vorhanden ist
                if (imageCount <= 1) {
                    return false;
                }
                const currentWidth = window.innerWidth;
                const isMobile = currentWidth < 992;
                if (deactivateOption === 'both') return false;
                if (deactivateOption === 'desktop' && !isMobile) return false;
                if (deactivateOption === 'mobile' && isMobile) return false;
                return true;
            }

             // ---- Logik Start ----
            const initialize = shouldInitializeSwiper();

            // Bestehende Swiper-Instanz zerstören, falls vorhanden
            if (swiperInstances[sliderId]) {
                swiperInstances[sliderId].destroy(true, true);
                delete swiperInstances[sliderId];
            }

            if (initialize) {
                // --- Swiper initialisieren ---
                imageContainerElement.classList.add('swiper');
                if (wrapperElement) wrapperElement.classList.add('swiper-wrapper');
                itemElements.forEach(item => {
                    item.classList.add('swiper-slide');
                    if (spacing && item.classList.contains(spacing)) {
                        item.classList.remove(spacing);
                    }
                });

                // Lazy Loading Funktionen (unverändert)
                 function updateLazyLoading() {
                     if (window.VSM && window.VSM.lazyMediaLoader) {
                        document.querySelectorAll(imageContainerSelector + ' img[data-src], ' + imageContainerSelector + ' video[data-src], ' + imageContainerSelector + ' video.lazy').forEach(element => {
                            window.VSM.lazyMediaLoader.handleNewElement(element);
                        });
                    }
                }

                function updateLazyLoadingForSwiper(swiper) {
                    if (window.VSM && window.VSM.lazyMediaLoader) {
                        swiper.slides.forEach(slide => {
                            const imageElement = slide.querySelector('img, video');
                            if (imageElement) {
                                window.VSM.lazyMediaLoader.handleNewElement(imageElement);
                            }
                        });
                    }
                }

                // Swiper Instanz erstellen
                const newSwiperInstance = new Swiper(imageContainerSelector, {
                    direction: 'horizontal',
                    loop: <?php echo $this->loop ? 'true' : 'false'; ?>,
                    lazy: false,
                    spaceBetween: <?= !empty($this->space_between) && is_numeric($this->space_between) ? intval($this->space_between) : 30; ?>,
                    speed: <?= !empty($this->transition_time) && is_numeric($this->transition_time) ? intval($this->transition_time) : 1500; ?>,
                    effect: <?php echo $this->slide_effect ? "'$this->slide_effect'" : "'slide'"; ?>,
                    <?php if ($this->autoplay): ?>
                    autoplay: {
                        delay: <?= !empty($this->autoplay_time) && is_numeric($this->autoplay_time) ? intval($this->autoplay_time) : 3000; ?>,
                        disableOnInteraction: false,
                    },
                    <?php endif; ?>
                    autoHeight: false,
                    <?php if ($this->slide_effect == "coverflow"): ?>
                    coverflowEffect: {
                        rotate: 50, stretch: 0, depth: 100, modifier: 1, slideShadows: true,
                    },
                    <?php endif; ?>
                    <?php if ($this->slide_effect == "fade"): ?>
                    fadeEffect: { crossFade: true },
                    <?php endif; ?>
                    navigation: {
                        nextEl: imageContainerSelector + '.swiper-button-next',
                        prevEl: imageContainerSelector + '.swiper-button-prev',
                    },
                    pagination: {
                        el: imageContainerSelector + '.swiper-pagination',
                        clickable: true,
                    },
                    <?php
                        $slidesPerView = $this->slides_per_view ?: "'auto'";
                        $slidesPerViewMobile = $this->slides_per_view_mobile ?: 1;
                    ?>
                    slidesPerView: <?= is_numeric($slidesPerViewMobile) ? intval($slidesPerViewMobile) : 1 ?>,
                    breakpoints: {
                        992: {
                            slidesPerView: <?= is_numeric($slidesPerView) ? floatval($slidesPerView) : (is_string($slidesPerView) ? $slidesPerView : "'auto'") ?>,
                        }
                    },
                    on: {
                        init: function () {
                            updateLazyLoadingForSwiper(this);
                            updateLazyLoading();
                        },
                        slideChange: function () {
                            updateLazyLoadingForSwiper(this);
                            updateLazyLoading();
                            document.dispatchEvent(new CustomEvent('swiper:slideChange', { detail: {swiper: this} }));
                        }
                    }
                });
                swiperInstances[sliderId] = newSwiperInstance; // Neue Instanz speichern
                outerContainer.querySelectorAll('.swiper-pagination, .swiper-button-prev, .swiper-button-next').forEach(el => el.style.display = ''); // Controls anzeigen

            } else {
                // --- Liste darstellen ---
                imageContainerElement.classList.remove('swiper');
                if (wrapperElement) wrapperElement.classList.remove('swiper-wrapper');
                itemElements.forEach((item, index) => {
                    item.classList.remove('swiper-slide');
                    item.style.display = 'block';
                    const isLast = index === itemElements.length - 1;
                    if (!isLast && spacing && spacing.startsWith('mb-')) {
                        item.classList.add(spacing);
                    } else if (spacing && item.classList.contains(spacing)) {
                        item.classList.remove(spacing);
                    }
                });
                outerContainer.querySelectorAll('.swiper-pagination, .swiper-button-prev, .swiper-button-next').forEach(el => el.style.display = 'none'); // Controls ausblenden
            }
        }

        // Initialer Durchlauf beim Laden
        sliderContainers.forEach(container => updateDisplayMode(container));

        // Event Listener für Resize hinzufügen
        const debouncedResizeHandler = debounce(() => {
            sliderContainers.forEach(container => updateDisplayMode(container));
        }, 250); // 250ms Verzögerung
        window.addEventListener('resize', debouncedResizeHandler);

    });
</script>
<?php endif; ?>
<?php // --- Ende Swiper JS Initialisierung --- ?>

</div>